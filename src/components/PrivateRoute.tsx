import { useEffect, useState } from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { auth } from '../services/firebase';
import { User, onAuthStateChanged } from 'firebase/auth';
import { RootState, AppDispatch } from '../app/store';
import { logoutUser } from '../features/user/userSlice';

const PrivateRoute: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const user = useSelector((state: RootState) => state.user.currentUser);
  const [checkingAuth, setCheckingAuth] = useState(true); // ğŸ”¥ Firebase doÄŸrulama sÃ¼recini beklet

  useEffect(() => {
    console.log('PrivateRoute: Auth listener baÅŸlatÄ±ldÄ±...');

    const unsubscribe = onAuthStateChanged(auth, (currentUser: User | null) => {
      console.log('Auth Durumu GÃ¼ncellendi:', currentUser);

      if (currentUser) {
        dispatch({
          type: 'user/loginSuccess', // ğŸ”¥ `userSlice.ts` iÃ§inde bir reducer ekleyerek doÄŸrudan Redux'Ä± gÃ¼ncelliyoruz.
          payload: {
            uid: currentUser.uid,
            email: currentUser.email,
            displayName: currentUser.displayName,
            photoURL: currentUser.photoURL,
            phoneNumber: currentUser.phoneNumber,
          },
        });
        setCheckingAuth(false); // ğŸ”¥ KullanÄ±cÄ± oturumu aÃ§Ä±k, yÃ¼kleme tamamlandÄ±
      } else {
        setTimeout(() => {
          if (!auth.currentUser) {
            dispatch(logoutUser());
          }
          setCheckingAuth(false);
        }, 1000); // ğŸ”¥ Firebase gerÃ§ekten null dÃ¶ndÃ¼rdÃ¼ÄŸÃ¼nde 1 saniye bekleyip Ã§Ä±kÄ±ÅŸ yap
      }
    });

    return () => {
      console.log('PrivateRoute: Cleanup iÅŸlemi...');
      unsubscribe();
    };
  }, [dispatch]);

  if (checkingAuth) {
    console.log('PrivateRoute: Auth kontrol ediliyor...');
    return <div>Loading...</div>; // ğŸ”¥ Firebase durumu doÄŸrulayana kadar bekle
  }

  console.log(
    'PrivateRoute: YÃ¶nlendirme yapÄ±lÄ±yor...',
    user ? 'Authenticated' : 'Not Authenticated',
  );

  return user ? <Outlet /> : <Navigate to="/login" replace />;
};

export default PrivateRoute;
